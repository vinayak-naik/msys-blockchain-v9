// SPDX-License-Identifier: MIT
    pragma solidity ^0.8.0;

// =================================== INTERFACE ================================================

    interface IUserContract  {
    function transferMSCNFrom(address messageSender,address owner, uint price) external;
    function transferMSCN(address participantAddress,uint amount) external;
    function burnMSCN(address messageSender, uint fees) external;
    function isUser(address messageSender)  external returns(bool);
    function mintMSCN(address messageSender, uint amount) external;
    function addRecords(address sender,uint matchId,uint amount,string memory game,string memory team) external;
}
// =================================== CONTRACT ================================================

    contract LotteryContract {

// ================================= CONSTRUCTOR ==============================================

        constructor(){
            admin=msg.sender;
        }

// =================================== STRUCTS =================================================

        struct lotteryWinner{
            address first;
            address second;
            address third;
        }
         struct Lottery{
            uint lotteryId;
            string lotteryName;
            uint amount;
            uint statusCode;
            uint timestamp;
        }
         
// =================================== VARIABLES ================================================

        IUserContract public userContractAddress;
        Lottery[] public lotteries;
        uint[] public lotteryAmountArray;
        address public admin;
        mapping(uint => address[]) public lotteryParticipants;
        mapping(uint => lotteryWinner) public lotteryWinners;
        mapping(uint =>uint) public lotteryAmount;

////////////////////////////////////////MODIFIERS////////////////////////////////////////////////

// =================================== ONLY ADMIN ================================================

        modifier onlyAdmin{
            require(msg.sender == admin,"Only admin can call this function");
            _;
        }

// =================================== VALID USER ================================================

        modifier validUser{
            require(userContractAddress.isUser(msg.sender),"Invalid user");
            _;
        }

// ================================== VALID LOTTERY ===============================================

        function validLottery(uint lotteryId) private view{
            require(lotteryId < lotteries.length,"Invalid lotteryId");
            require(lotteries[lotteryId].statusCode==2,"Lottery is not active");
        }

// ============================ SET USER CONTRACT ADDRESS ==========================================

        function setUserContractAddress(address _userContractAddress) public  onlyAdmin returns(bool){
            IUserContract _UserContract=IUserContract(_userContractAddress);
            userContractAddress=_UserContract;
            return true;
    }

// ================================ UPDATE-LOTTERY-ADMIN ================================================

        function updateLotteryAdmin(address _address) public onlyAdmin returns (bool) {
                admin=_address;
                return true;
        }

// ==================================  ADD LOTTERY =================================================

        function addLottery(string memory lotteryName, uint amount, uint timeStamp) public onlyAdmin returns(bool){
            userContractAddress.mintMSCN(address(this), 1000);
            lotteries.push(Lottery(lotteries.length, lotteryName, amount, 1, timeStamp));
            lotteryAmountArray.push(0);
            return true;
        }

// =============================== GET LOTTERIES LENGTH =============================================

        function getLotteriesLength() public view returns(uint){
            return lotteries.length;
        }

// ================================= GET ALL LOTTERIES ==============================================

        function getAllLotteries() public view returns (Lottery[] memory) {
            return lotteries;
        }

// ============================== GET LOTTERY AMOUNT ARRAY ===========================================

        function getLotteryAmountArray() public view returns (uint[] memory array) {
            return lotteryAmountArray;
        }

// =============================== UPDATE LOTTERY STATUS =============================================

        function updateLotteryStatus(uint lotteryId, uint statusCode) public onlyAdmin returns(bool){
            lotteries[lotteryId].statusCode=statusCode;
            return true;
        }

// ================================ PARTICIPATE LOTTERY ==============================================

        function participateLottery(uint lotteryId) public validUser  returns(bool){
            validLottery(lotteryId);
            uint amount=lotteries[lotteryId].amount;
            uint feesAmount=amount/100;
            uint finalLotteryAmount=amount-feesAmount;
            userContractAddress.transferMSCNFrom(msg.sender,address(this), finalLotteryAmount);
            userContractAddress.burnMSCN(msg.sender, feesAmount);
            lotteryParticipants[lotteryId].push(msg.sender);
            lotteryAmount[lotteryId]+=finalLotteryAmount;
            userContractAddress.addRecords(msg.sender,lotteryId,amount,"lottery","--");
            return true;
        }

// ============================== GET PARTICIPANTS LENGTH =============================================

        function getLotteryParticipantsLength(uint lotteryId) public view returns(uint){
            return lotteryParticipants[lotteryId].length;
        }

// ================================== GET PARTICIPANT =================================================

        function getLotteryParticipants(uint lotteryId) public view returns (address[] memory) {
            return lotteryParticipants[lotteryId];
        }

// ================================== GET PARTICIPANT =================================================

        function getLotteryParticipant(uint lotteryId, uint index) public view returns (address) {
            return lotteryParticipants[lotteryId][index];
        }

// ==================================== RANDOM NUMBER =================================================

        function randomNumber(uint number) internal view returns(uint){
           return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, number)));
        }

// =============================== ANNOUNCE LOTTERY RESULT ============================================

        function announceLotteryResult(uint lotteryId) public onlyAdmin returns(bool){
            validLottery(lotteryId);
            require(lotteryParticipants[lotteryId].length > 6,"Minimum 10 participants required");
            uint participantsLength=lotteryParticipants[lotteryId].length;
            uint amount=lotteries[lotteryId].amount;
            uint totalAmount=(participantsLength*((amount/100)*99))+1000;
            uint randomNumber0=randomNumber(12);
            uint randomNumber1=randomNumber(123);
            uint randomNumber2=randomNumber(1234);
            uint index0=  randomNumber0 % participantsLength;
            uint index1;
            uint index2;
            do{
                randomNumber1++;
                index1= randomNumber1 % participantsLength;
            }while(index0==index1); 
            do{
                randomNumber2++;
                index2= randomNumber2 % participantsLength;
            }while(index0==index2 || index1==index2);

            //-------------------Save Winners Addresses------------------------

            lotteryWinners[lotteryId]=lotteryWinner(lotteryParticipants[lotteryId][index0],lotteryParticipants[lotteryId][index1],lotteryParticipants[lotteryId][index2]);

            //-------------------Transfer Amount------------------------
           
            userContractAddress.transferMSCN( lotteryParticipants[lotteryId][index0], ((totalAmount/100)*50));
            userContractAddress.transferMSCN( lotteryParticipants[lotteryId][index1], ((totalAmount/100)*30));
            userContractAddress.transferMSCN( lotteryParticipants[lotteryId][index2], ((totalAmount/100)*20));

            lotteries[lotteryId].statusCode=3;
            lotteryAmountArray[lotteryId]=totalAmount;
            return true;
        }
    }